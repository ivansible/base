---
- name: test module json_patch
  hosts: all
  gather_facts: false
  tags: json_patch
  vars:
    test_json: "{{ ansible_user_dir }}/test.json"
  tasks:
    - name: deploy the test json file
      ansible.builtin.copy:
        content: '{"foo": {"one": 1, "bar": "baz"}}'  # noqa 206
        dest: "{{ test_json }}"
        mode: 0644
    - name: get checksum of original json
      ansible.builtin.stat:
        path: "{{ test_json }}"
      register: file1

    - name: get the original file content
      ansible.builtin.slurp:
        src: "{{ test_json }}"
      register: data0
    - name: assert that original json is expected
      ansible.builtin.assert:
        that:
          - data0.content |b64decode |from_json |json_query('foo.qux') is none
          - data0.content |b64decode |from_json |json_query('foo.bar') == 'baz'
          - data0.content |b64decode |from_json |json_query('foo.one') == 1
          - data0.content |b64decode |from_json |json_query('foo.uno') is none

    - name: add the 'qux' member to json and back it up
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: add
            path: /foo/qux
            value: quux
        backup: true
      register: add1

    - name: get file content after adding
      ansible.builtin.slurp:
        src: "{{ test_json }}"
      register: data1
    - name: assert that adding has changed json and it really has 'qux'
      ansible.builtin.assert:
        that:
          - add1 is changed
          - data1.content |b64decode |from_json |json_query('foo.qux') == 'quux'

    - name: check backup file after adding
      ansible.builtin.stat:
        path: "{{ add1.backup }}"
      register: add1_backup
    - name: assert that backup file exists and is valid
      ansible.builtin.assert:
        that: add1_backup.stat.checksum == file1.stat.checksum
    - name: print backup file name
      ansible.builtin.debug:
        msg: "{{ add1.backup }}"

    - name: add the 'qux' member again
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: add
            path: /foo/qux
            value: quux
        backup: true
      register: add2
    - name: assert that adding 'qux' didn't change this time
      ansible.builtin.assert:
        that: add2 is not changed

    - name: remove the 'bar' member from json
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: remove
            path: /foo/bar
      register: remove1

    - name: get file content after removal
      ansible.builtin.slurp:
        src: "{{ test_json }}"
      register: data2
    - name: assert that removal has changed json and it doesn't have 'bar'
      ansible.builtin.assert:
        that:
          - remove1 is changed
          - data2.content |b64decode |from_json |json_query('foo.bar') is none

    - name: remove the 'bar' member again
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: remove
            path: "/foo/bar"
      register: remove2
    - name: assert that removal didn't change this time
      ansible.builtin.assert:
        that: remove2 is not changed

    - name: restore original json from backup
      ansible.builtin.copy:
        remote_src: true
        src: "{{ add1.backup }}"
        dest: "{{ test_json }}"
        mode: 0644
      register: restore1
    - name: assert that restored file is dentical to original json
      ansible.builtin.assert:
        that: restore1.checksum == file1.stat.checksum

    - name: move the 'one' member to 'uno'
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: move
            from: /foo/one
            path: /foo/uno
      register: move1

    - name: get file content after move
      ansible.builtin.slurp:
        src: "{{ test_json }}"
      register: data3
    - name: assert that the 'one' member was moved
      ansible.builtin.assert:
        that:
          - move1 is changed
          - data3.content |b64decode |from_json | json_query('foo.one') is none
          - data3.content |b64decode |from_json | json_query('foo.uno') == 1

    - name: move the 'one' member to 'uno' again
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: move
            from: /foo/one
            path: /foo/uno
      register: move2
    - name: assert that the move didn't change this time
      ansible.builtin.assert:
        that: move2 is not changed

    - name: replace the 'uno' member with a new value
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: replace
            path: /foo/uno
            value: one
      register: replace1

    - name: get file content after replacement
      ansible.builtin.slurp:
        src: "{{ test_json }}"
      register: data4
    - name: assert that the 'uno' member's value was replaced
      ansible.builtin.assert:
        that:
          - replace1 is changed
          - data4.content |b64decode |from_json |json_query('foo.uno') == 'one'

    - name: replace the 'uno' member's value again
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: replace
            path: /foo/uno
            value: one
      register: replace2
    - name: assert that the replace didn't change this time
      ansible.builtin.assert:
        that: replace2 is not changed

    - name: copy the 'uno' member into a new member and change its value
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: copy
            from: /foo/uno
            path: /foo/dos
      register: copy1

    - name: get file content after copying
      ansible.builtin.slurp:
        src: "{{ test_json }}"
      register: data5
    - name: assert that the copy duplicated the value
      ansible.builtin.assert:
        that:
          - copy1 is changed
          - data5.content |b64decode |from_json |json_query('foo.dos') == 'one'

    - name: copy the 'uno' member into a new member again
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: copy
            from: /foo/uno
            path: /foo/dos
      register: copy2
    - name: assert that the copy didn't change this time
      ansible.builtin.assert:
        that: copy2 is not changed

    - name: test the value of 'dos' is 'two'
      ivansible.base.json_patch:
        src: "{{ test_json }}"
        operations:
          - op: test
            path: /foo/dos
            value: two
      register: test1
    - name: assert that the test did not pass
      ansible.builtin.assert:
        that:
          - test1 is not changed
          - not test1.tested
...
